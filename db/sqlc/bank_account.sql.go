// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: bank_account.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_accounts (
  user_id,
  bank_name,
  bank_account_name,
  bank_account_number
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, bank_name, bank_account_name, bank_account_number, created_at
`

type CreateBankAccountParams struct {
	UserID            uuid.UUID `json:"user_id"`
	BankName          string    `json:"bank_name"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountNumber string    `json:"bank_account_number"`
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, createBankAccount,
		arg.UserID,
		arg.BankName,
		arg.BankAccountName,
		arg.BankAccountNumber,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BankName,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :one
DELETE FROM bank_accounts
WHERE
  id = $1
  AND 
  user_id = $2
RETURNING id, user_id, bank_name, bank_account_name, bank_account_number, created_at
`

type DeleteBankAccountParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteBankAccount(ctx context.Context, arg DeleteBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, deleteBankAccount, arg.ID, arg.UserID)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BankName,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getBankAccountsByUserId = `-- name: GetBankAccountsByUserId :many
SELECT id, bank_name, bank_account_name, bank_account_number FROM bank_accounts
WHERE user_id = $1
`

type GetBankAccountsByUserIdRow struct {
	ID                uuid.UUID `json:"id"`
	BankName          string    `json:"bank_name"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountNumber string    `json:"bank_account_number"`
}

func (q *Queries) GetBankAccountsByUserId(ctx context.Context, userID uuid.UUID) ([]GetBankAccountsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getBankAccountsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBankAccountsByUserIdRow{}
	for rows.Next() {
		var i GetBankAccountsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.BankAccountName,
			&i.BankAccountNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBankAccount = `-- name: UpdateBankAccount :one
UPDATE bank_accounts
SET
  bank_name = $3,
  bank_account_name = $4,
  bank_account_number = $5
WHERE
  id = $1
  AND 
  user_id = $2
RETURNING id, user_id, bank_name, bank_account_name, bank_account_number, created_at
`

type UpdateBankAccountParams struct {
	ID                uuid.UUID `json:"id"`
	UserID            uuid.UUID `json:"user_id"`
	BankName          string    `json:"bank_name"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountNumber string    `json:"bank_account_number"`
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, updateBankAccount,
		arg.ID,
		arg.UserID,
		arg.BankName,
		arg.BankAccountName,
		arg.BankAccountNumber,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BankName,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.CreatedAt,
	)
	return i, err
}
