// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  price,
  image_url,
  stock,
  condition,
  tags,
  is_purchaseable
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, price, image_url, stock, condition, tags, is_purchaseable, created_at
`

type CreateProductParams struct {
	Name           string `json:"name"`
	Price          int32  `json:"price"`
	ImageUrl       string `json:"image_url"`
	Stock          int32  `json:"stock"`
	Condition      string `json:"condition"`
	Tags           string `json:"tags"`
	IsPurchaseable bool   `json:"is_purchaseable"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.ImageUrl,
		arg.Stock,
		arg.Condition,
		arg.Tags,
		arg.IsPurchaseable,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.Stock,
		&i.Condition,
		&i.Tags,
		&i.IsPurchaseable,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, price, image_url, stock, condition, tags, is_purchaseable, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.ImageUrl,
		&i.Stock,
		&i.Condition,
		&i.Tags,
		&i.IsPurchaseable,
		&i.CreatedAt,
	)
	return i, err
}
